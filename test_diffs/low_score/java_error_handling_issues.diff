diff --git a/src/main/java/com/example/service/FileProcessorService.java b/src/main/java/com/example/service/FileProcessorService.java
index 1234567..abcdefg 100644
--- a/src/main/java/com/example/service/FileProcessorService.java
+++ b/src/main/java/com/example/service/FileProcessorService.java
@@ -1,45 +1,108 @@
 package com.example.service;
 
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Paths;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import org.springframework.stereotype.Service;
-
-import com.example.exception.FileProcessingException;
-import com.example.model.ProcessedFile;
-
-/**
- * Service for processing files
- */
-@Service
-public class FileProcessorService {
-
-    /**
-     * Process a file and return the result
-     * 
-     * @param filePath Path to the file
-     * @return ProcessedFile object with results
-     * @throws FileProcessingException if processing fails
-     */
-    public ProcessedFile processFile(String filePath) throws FileProcessingException {
-        try {
-            File file = new File(filePath);
-            
-            if (!file.exists()) {
-                throw new FileProcessingException("File not found: " + filePath);
-            }
-            
-            List<String> lines = Files.readAllLines(Paths.get(filePath));
-            
-            // Process lines
-            List<String> processedLines = lines.stream()
-                    .map(String::toUpperCase)
-                    .collect(Collectors.toList());
-            
-            return new ProcessedFile(file.getName(), processedLines, processedLines.size());
-        } catch (IOException e) {
-            throw new FileProcessingException("Error processing file: " + e.getMessage(), e);
-        }
-    }
+import java.io.*;
+import java.nio.file.*;
+import java.sql.*;
+import java.util.*;
+
+import org.springframework.stereotype.*;
+
+import com.example.model.*;
+
+// Missing proper imports
+
+@Service
+public class FileProcessorService {
+
+    // Hardcoded database credentials
+    private static final String DB_URL = "jdbc:mysql://localhost:3306/filedb";
+    private static final String DB_USER = "root";
+    private static final String DB_PASS = "password";
+
+    // No dependency injection
+    private Connection getConnection() {
+        try {
+            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
+        } catch (SQLException e) {
+            // Swallowing exception
+            System.out.println("Database connection error: " + e.getMessage());
+            return null;
+        }
+    }
+
+    // No exception handling
+    public ProcessedFile processFile(String filePath) {
+        // No input validation
+        File file = new File(filePath);
+        
+        // No null checks
+        List<String> lines = readAllLines(filePath);
+        
+        // Process lines without checking for null
+        List<String> processedLines = new ArrayList<>();
+        for (String line : lines) {
+            processedLines.add(line.toUpperCase());
+        }
+        
+        // Save to database without transaction
+        saveToDatabase(file.getName(), processedLines);
+        
+        return new ProcessedFile(file.getName(), processedLines, processedLines.size());
+    }
+    
+    // Method with multiple responsibilities
+    private List<String> readAllLines(String filePath) {
+        try {
+            // Resource leak - not using try-with-resources
+            FileInputStream fis = new FileInputStream(filePath);
+            BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
+            
+            List<String> lines = new ArrayList<>();
+            String line;
+            
+            while ((line = reader.readLine()) != null) {
+                lines.add(line);
+            }
+            
+            // Resources not closed properly
+            return lines;
+        } catch (Exception e) {
+            // Generic exception catch
+            // Exception details lost
+            System.out.println("Error reading file: " + e.getMessage());
+            return new ArrayList<>(); // Returning empty list instead of throwing
+        }
+    }
+    
+    // No transaction management
+    private void saveToDatabase(String fileName, List<String> lines) {
+        Connection conn = null;
+        Statement stmt = null;
+        
+        try {
+            conn = getConnection();
+            stmt = conn.createStatement();
+            
+            // SQL Injection vulnerability
+            stmt.executeUpdate("DELETE FROM processed_files WHERE file_name = '" + fileName + "'");
+            
+            // Inefficient - should use batch
+            for (String line : lines) {
+                // SQL Injection vulnerability
+                stmt.executeUpdate(
+                    "INSERT INTO processed_lines (file_name, line_content) VALUES ('" + 
+                    fileName + "', '" + line + "')"
+                );
+            }
+        } catch (SQLException e) {
+            // Exception swallowed
+            System.out.println("Database error: " + e.getMessage());
+        } finally {
+            // Nested try-catch in finally block
+            try {
+                if (stmt != null) stmt.close();
+                if (conn != null) conn.close();
+            } catch (SQLException e) {
+                // Exception swallowed
+                System.out.println("Error closing resources: " + e.getMessage());
+            }
+        }
+    }
+    
+    // Dangerous method - allows arbitrary file deletion
+    public boolean deleteFile(String filePath) {
+        // No validation or permission checks
+        File file = new File(filePath);
+        return file.delete();
+    }
+    
+    // Thread-unsafe implementation
+    public void processDirectory(String directoryPath) {
+        File directory = new File(directoryPath);
+        
+        // No directory existence check
+        File[] files = directory.listFiles();
+        
+        // No null check
+        for (File file : files) {
+            if (file.isFile()) {
+                // Recursive call without depth limit
+                processFile(file.getAbsolutePath());
+            } else if (file.isDirectory()) {
+                // Recursive call without depth limit
+                processDirectory(file.getAbsolutePath());
+            }
+        }
+    }
 }
