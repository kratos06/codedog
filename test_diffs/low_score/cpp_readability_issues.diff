diff --git a/src/algorithm/graph_processor.cpp b/src/algorithm/graph_processor.cpp
index 1234567..abcdefg 100644
--- a/src/algorithm/graph_processor.cpp
+++ b/src/algorithm/graph_processor.cpp
@@ -1,50 +1,123 @@
 #include <iostream>
 #include <vector>
 #include <queue>
-#include <unordered_map>
-#include <string>
-#include "graph_processor.h"
+#include<unordered_map>
+#include<string>
+#include"graph_processor.h"
+using namespace std;
 
-/**
- * Implementation of graph processing algorithms
- */
+// Global variables
+vector<vector<int>> g;
+vector<bool> v;
+vector<int> d;
+int n, m;
 
-namespace graph {
+// No comments or documentation
+class GraphProcessor {
+public:
+    // Unclear variable names
+    unordered_map<int, vector<pair<int, int>>> a;
+    
+    // Constructor with no initialization list
+    GraphProcessor() {
+        a = unordered_map<int, vector<pair<int, int>>>();
+    }
+    
+    // No parameter validation
+    void addE(int x, int y, int w) {
+        a[x].push_back(make_pair(y, w));
+    }
+    
+    // Inconsistent naming convention
+    vector<int> ShortestPath(int s, int t) {
+        // Magic numbers
+        const int INF = 1000000000;
+        
+        // Unnecessary variable declarations
+        int i, j, k, u, v, w;
+        
+        // Inefficient data structure initialization
+        vector<int> dist(a.size() + 1, INF);
+        vector<int> prev(a.size() + 1, -1);
+        vector<bool> visited(a.size() + 1, false);
+        
+        // Unclear algorithm implementation
+        dist[s] = 0;
+        for (i = 0; i < a.size(); i++) {
+            int min_dist = INF;
+            int min_vertex = -1;
+            
+            for (j = 0; j < a.size() + 1; j++) {
+                if (!visited[j] && dist[j] < min_dist) {
+                    min_dist = dist[j];
+                    min_vertex = j;
+                }
+            }
+            
+            if (min_vertex == -1) break;
+            
+            u = min_vertex;
+            visited[u] = true;
+            
+            if (u == t) break;
+            
+            // Nested loops with poor indentation
+            for (j = 0; j < a[u].size(); j++) {
+            v = a[u][j].first;
+            w = a[u][j].second;
+            
+            if (!visited[v] && dist[u] + w < dist[v]) {
+            dist[v] = dist[u] + w;
+            prev[v] = u;
+            }
+            }
+        }
+        
+        // Convoluted path reconstruction
+        vector<int> path;
+        if (dist[t] == INF) return path;
+        
+        for (u = t; u != -1; u = prev[u])
+            path.push_back(u);
+        
+        // Unnecessary reverse operation
+        vector<int> result;
+        for (i = path.size() - 1; i >= 0; i--)
+            result.push_back(path[i]);
+        
+        return result;
+    }
+    
+    // Poorly implemented DFS with side effects
+    void dfs(int node) {
+        v[node] = true;
+        for (int i = 0; i < g[node].size(); i++) {
+            int to = g[node][i];
+            if (!v[to]) {
+                dfs(to);
+            }
+        }
+    }
+    
+    // Function does too many things
+    void processGraph(string filename) {
+        // Hard-coded file path
+        FILE* f = fopen(filename.c_str(), "r");
+        
+        // No error checking
+        fscanf(f, "%d %d", &n, &m);
+        
+        // Resizing global variables
+        g.resize(n + 1);
+        v.resize(n + 1);
+        d.resize(n + 1);
+        
+        // Raw loop with no explanation
+        for (int i = 0; i < m; i++) {
+            int x, y, w;
+            fscanf(f, "%d %d %d", &x, &y, &w);
+            g[x].push_back(y);
+            addE(x, y, w);
+        }
+        
+        fclose(f);
+    }
+    
+    // Cryptic algorithm with no explanation
+    int mst() {
+        // Magic numbers and unclear variable names
+        int res = 0;
+        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
+        vector<bool> vis(n + 1, 0);
+        pq.push({0, 1});
+        while (!pq.empty()) {
+            auto p = pq.top();
+            pq.pop();
+            int w = p.first, u = p.second;
+            if (vis[u]) continue;
+            vis[u] = 1;
+            res += w;
+            for (auto& e : a[u]) {
+                int v = e.first, w = e.second;
+                if (!vis[v]) pq.push({w, v});
+            }
+        }
+        return res;
+    }
+};
 
-    GraphProcessor::GraphProcessor() {
-        // Initialize graph processor
-    }
-
-    void GraphProcessor::addEdge(int source, int target, int weight) {
-        adjacencyList[source].push_back(std::make_pair(target, weight));
-    }
-
-    std::vector<int> GraphProcessor::shortestPath(int source, int target) {
-        const int INF = std::numeric_limits<int>::max();
-        
-        // Initialize distances
-        std::vector<int> distance(adjacencyList.size() + 1, INF);
-        std::vector<int> previous(adjacencyList.size() + 1, -1);
-        std::vector<bool> visited(adjacencyList.size() + 1, false);
-        
-        // Dijkstra's algorithm
-        distance[source] = 0;
-        
-        for (size_t i = 0; i < adjacencyList.size(); ++i) {
-            // Find vertex with minimum distance
-            int minDistance = INF;
-            int minVertex = -1;
-            
-            for (size_t j = 0; j < adjacencyList.size() + 1; ++j) {
-                if (!visited[j] && distance[j] < minDistance) {
-                    minDistance = distance[j];
-                    minVertex = j;
-                }
-            }
-            
-            if (minVertex == -1) break;
-            
-            // Mark vertex as visited
-            visited[minVertex] = true;
-            
-            // If target is reached, stop
-            if (minVertex == target) break;
-            
-            // Update distances to neighbors
-            for (const auto& edge : adjacencyList[minVertex]) {
-                int neighbor = edge.first;
-                int weight = edge.second;
-                
-                if (!visited[neighbor] && distance[minVertex] + weight < distance[neighbor]) {
-                    distance[neighbor] = distance[minVertex] + weight;
-                    previous[neighbor] = minVertex;
-                }
-            }
-        }
-        
-        // Reconstruct path
-        std::vector<int> path;
-        if (distance[target] == INF) return path;
-        
-        for (int vertex = target; vertex != -1; vertex = previous[vertex]) {
-            path.push_back(vertex);
-        }
-        
-        std::reverse(path.begin(), path.end());
-        return path;
-    }
-
-} // namespace graph
