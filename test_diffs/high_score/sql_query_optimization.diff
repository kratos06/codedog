diff --git a/database/queries/order_analytics.sql b/database/queries/order_analytics.sql
index 9876543..fedcba0 100644
--- a/database/queries/order_analytics.sql
+++ b/database/queries/order_analytics.sql
@@ -1,42 +1,87 @@
--- Order analytics queries
+-- Order analytics queries optimized for performance
+-- These queries are used for generating business reports and dashboards
 
--- Get total sales by month
-SELECT 
-    DATE_FORMAT(order_date, '%Y-%m') AS month,
-    SUM(total_amount) AS total_sales
-FROM orders
-WHERE order_status = 'completed'
-GROUP BY DATE_FORMAT(order_date, '%Y-%m')
-ORDER BY month DESC;
+-- Get total sales by month with YoY comparison
+WITH monthly_sales AS (
+    SELECT 
+        DATE_FORMAT(order_date, '%Y-%m') AS month,
+        EXTRACT(YEAR FROM order_date) AS year,
+        EXTRACT(MONTH FROM order_date) AS month_num,
+        SUM(total_amount) AS total_sales,
+        COUNT(DISTINCT order_id) AS order_count
+    FROM orders
+    WHERE order_status = 'completed'
+      AND order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
+    GROUP BY 
+        DATE_FORMAT(order_date, '%Y-%m'),
+        EXTRACT(YEAR FROM order_date),
+        EXTRACT(MONTH FROM order_date)
+)
+SELECT 
+    current_year.month,
+    current_year.total_sales AS current_sales,
+    previous_year.total_sales AS previous_sales,
+    current_year.order_count AS current_order_count,
+    previous_year.order_count AS previous_order_count,
+    ROUND((current_year.total_sales - previous_year.total_sales) / previous_year.total_sales * 100, 2) AS sales_growth_percent
+FROM monthly_sales current_year
+LEFT JOIN monthly_sales previous_year ON 
+    previous_year.month_num = current_year.month_num AND 
+    previous_year.year = current_year.year - 1
+WHERE current_year.year = EXTRACT(YEAR FROM CURRENT_DATE())
+ORDER BY current_year.month_num;
 
--- Get top selling products
+-- Get top selling products with inventory status
+-- Added index on order_items(product_id) and products(category_id)
 SELECT 
     p.product_id,
     p.product_name,
+    p.category_id,
+    c.category_name,
     SUM(oi.quantity) AS total_quantity,
-    SUM(oi.quantity * oi.unit_price) AS total_revenue
+    SUM(oi.quantity * oi.unit_price) AS total_revenue,
+    p.stock_quantity AS current_stock,
+    CASE 
+        WHEN p.stock_quantity = 0 THEN 'Out of stock'
+        WHEN p.stock_quantity < 10 THEN 'Low stock'
+        ELSE 'In stock'
+    END AS stock_status,
+    ROUND(SUM(oi.quantity * oi.unit_price) / 
+        (SELECT SUM(total_amount) FROM orders WHERE order_status = 'completed') * 100, 2) AS revenue_percent
 FROM order_items oi
-JOIN orders o ON oi.order_id = o.order_id
-JOIN products p ON oi.product_id = p.product_id
-WHERE o.order_status = 'completed'
+INNER JOIN orders o ON oi.order_id = o.order_id
+INNER JOIN products p ON oi.product_id = p.product_id
+INNER JOIN categories c ON p.category_id = c.category_id
+WHERE o.order_status = 'completed' 
+  AND o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
 GROUP BY 
     p.product_id,
-    p.product_name
+    p.product_name,
+    p.category_id,
+    c.category_name,
+    p.stock_quantity
 ORDER BY total_revenue DESC
 LIMIT 20;
 
--- Get customer purchase history
+-- Get customer purchase history with customer segments
+-- Added index on orders(customer_id, order_date)
 SELECT 
     c.customer_id,
     c.first_name,
     c.last_name,
     c.email,
-    COUNT(o.order_id) AS total_orders,
-    SUM(o.total_amount) AS total_spent,
-    AVG(o.total_amount) AS average_order_value,
-    MAX(o.order_date) AS last_order_date
+    COUNT(DISTINCT o.order_id) AS total_orders,
+    ROUND(SUM(o.total_amount), 2) AS total_spent,
+    ROUND(AVG(o.total_amount), 2) AS average_order_value,
+    MAX(o.order_date) AS last_order_date,
+    DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) AS days_since_last_order,
+    CASE 
+        WHEN COUNT(o.order_id) > 10 AND SUM(o.total_amount) > 5000 THEN 'VIP'
+        WHEN COUNT(o.order_id) > 5 THEN 'Loyal'
+        WHEN DATEDIFF(CURRENT_DATE(), MAX(o.order_date)) > 365 THEN 'Inactive'
+        WHEN DATEDIFF(CURRENT_DATE(), MIN(o.order_date)) < 30 THEN 'New'
+        ELSE 'Regular'
+    END AS customer_segment
 FROM customers c
-JOIN orders o ON c.customer_id = o.customer_id
+LEFT JOIN orders o ON c.customer_id = o.customer_id AND o.order_status = 'completed'
 GROUP BY 
     c.customer_id,
     c.first_name,
     c.last_name,
     c.email
-ORDER BY total_spent DESC;
+HAVING total_orders > 0
+ORDER BY total_spent DESC
+LIMIT 1000;
 
--- Get sales by category
+-- Get sales by category with trend analysis
+-- Added materialized view refresh every 6 hours
+WITH category_sales AS (
+    SELECT 
+        c.category_id,
+        c.category_name,
+        DATE_FORMAT(o.order_date, '%Y-%m') AS month,
+        SUM(oi.quantity * oi.unit_price) AS category_revenue
+    FROM order_items oi
+    INNER JOIN orders o ON oi.order_id = o.order_id
+    INNER JOIN products p ON oi.product_id = p.product_id
+    INNER JOIN categories c ON p.category_id = c.category_id
+    WHERE o.order_status = 'completed'
+      AND o.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
+    GROUP BY 
+        c.category_id,
+        c.category_name,
+        DATE_FORMAT(o.order_date, '%Y-%m')
+)
 SELECT 
-    c.category_name,
-    SUM(oi.quantity * oi.unit_price) AS category_revenue
-FROM order_items oi
-JOIN orders o ON oi.order_id = o.order_id
-JOIN products p ON oi.product_id = p.product_id
-JOIN categories c ON p.category_id = c.category_id
-WHERE o.order_status = 'completed'
-GROUP BY c.category_name
-ORDER BY category_revenue DESC;
+    category_id,
+    category_name,
+    SUM(category_revenue) AS total_revenue,
+    ROUND(AVG(category_revenue), 2) AS avg_monthly_revenue,
+    MAX(category_revenue) AS best_month_revenue,
+    MIN(category_revenue) AS worst_month_revenue,
+    ROUND(
+        (SUM(CASE WHEN month >= DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), '%Y-%m') THEN category_revenue ELSE 0 END) -
+         SUM(CASE WHEN month < DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), '%Y-%m') THEN category_revenue ELSE 0 END)) /
+        NULLIF(SUM(CASE WHEN month < DATE_FORMAT(DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH), '%Y-%m') THEN category_revenue ELSE 0 END), 0) * 100,
+    2) AS six_month_growth_percent
+FROM category_sales
+GROUP BY 
+    category_id,
+    category_name
+ORDER BY total_revenue DESC;
